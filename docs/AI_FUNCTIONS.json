{
  "generated_at": "2025-05-20T07:43:51.150Z",
  "functions": [
    {
      "name": "login",
      "route": "POST /auth/login",
      "file": "src/controllers/authController.js",
      "params": [
        "email:string",
        "password:string"
      ],
      "returns": [
        "Object",
        "Error"
      ],
      "description": "Авторизация пользователя (логин)"
    },
    {
      "name": "register",
      "route": "POST /auth/register",
      "file": "src/controllers/authController.js",
      "params": [
        "email:string",
        "password:string",
        "fullName:string",
        "role:string"
      ],
      "returns": [
        "Object",
        "Error"
      ],
      "description": "Регистрация нового пользователя (только для теста/первого пользователя)"
    },
    {
      "name": "verify",
      "route": "GET /auth/verify",
      "file": "src/controllers/authController.js",
      "params": [],
      "returns": [
        "Object",
        "Error"
      ],
      "description": "Проверка валидности токена"
    },
    {
      "name": "requestPasswordReset",
      "route": "POST /auth/request-password-reset",
      "file": "src/controllers/authController.js",
      "params": [
        "email:string"
      ],
      "returns": [
        "Object",
        "Error",
        "Error"
      ],
      "description": "Запрос на сброс пароля."
    },
    {
      "name": "resetPassword",
      "route": "POST /auth/reset-password",
      "file": "src/controllers/authController.js",
      "params": [
        "token:string",
        "password:string"
      ],
      "returns": [
        "Object",
        "Error",
        "Error"
      ],
      "description": "Сброс пароля пользователя."
    },
    {
      "name": "getAll",
      "route": "GET /api/clients",
      "file": "src/controllers/clientController.js",
      "params": [],
      "returns": [
        "Array.<Client>",
        "Error"
      ],
      "description": "Получить список всех клиентов."
    },
    {
      "name": "getById",
      "route": "GET /api/clients/:id",
      "file": "src/controllers/clientController.js",
      "params": [
        "id.path.required:integer"
      ],
      "returns": [
        "Client",
        "Error",
        "Error"
      ],
      "description": "Получить клиента по ID."
    },
    {
      "name": "create",
      "route": "POST /api/clients",
      "file": "src/controllers/clientController.js",
      "params": [
        "name.formData.required:string",
        "logoFile.formData:file"
      ],
      "returns": [
        "Client",
        "Error",
        "Error"
      ],
      "description": "Создать нового клиента."
    },
    {
      "name": "update",
      "route": "PUT /api/clients/:id",
      "file": "src/controllers/clientController.js",
      "params": [
        "id.path.required:integer",
        "name.formData:string",
        "logoFile.formData:file",
        "removeLogo.formData:string"
      ],
      "returns": [
        "Client",
        "Error",
        "Error"
      ],
      "description": "Обновить клиента."
    },
    {
      "name": "remove",
      "route": "DELETE /api/clients/:id",
      "file": "src/controllers/clientController.js",
      "params": [
        "id.path.required:integer"
      ],
      "returns": [
        "object",
        "Error",
        "Error",
        "Error"
      ],
      "description": "Удалить клиента."
    },
    {
      "name": "getAll",
      "route": "GET /api/companies",
      "file": "src/controllers/companyController.js",
      "params": [
        "clientId:integer"
      ],
      "returns": [
        "Array.<Company>",
        "Error"
      ],
      "description": "Получить список всех компаний"
    },
    {
      "name": "getById",
      "route": "GET /api/companies/:id",
      "file": "src/controllers/companyController.js",
      "params": [
        "id.path.required:integer"
      ],
      "returns": [
        "Company",
        "Error",
        "Error"
      ],
      "description": "Получить компанию по ID"
    },
    {
      "name": "create",
      "route": "POST /api/companies",
      "file": "src/controllers/companyController.js",
      "params": [
        "client_id.body.required:integer",
        "name.body.required:string",
        "inn.body.required:string",
        "kpp.body:string",
        "legal_address.body:string",
        "postal_address.body:string",
        "actual_address.body:string",
        "bank_details.body:string",
        "edo_provider_name.body:string"
      ],
      "returns": [
        "Company",
        "Error",
        "Error"
      ],
      "description": "Создать новую компанию (юрлицо клиента)"
    },
    {
      "name": "update",
      "route": "PUT /api/companies/:id",
      "file": "src/controllers/companyController.js",
      "params": [
        "id.path.required:integer",
        "body.body:object"
      ],
      "returns": [
        "Company",
        "Error",
        "Error",
        "Error"
      ],
      "description": "Обновить компанию (юрлицо клиента)"
    },
    {
      "name": "remove",
      "route": "DELETE /api/companies/:id",
      "file": "src/controllers/companyController.js",
      "params": [
        "id.path.required:integer"
      ],
      "returns": [
        "object",
        "Error",
        "Error"
      ],
      "description": "Удалить компанию (юрлицо клиента)"
    },
    {
      "name": "getAll",
      "route": "GET /api/field-mappings",
      "file": "src/controllers/fieldMappingController.js",
      "params": [
        "req.user:object",
        "req.user.client_id:number"
      ],
      "returns": [
        "Array.<FieldMapping>",
        "Error"
      ],
      "description": "Get all field mappings, optionally filtered by user's client_id."
    },
    {
      "name": "getByClientId",
      "route": "GET /api/field-mappings/client/{clientId}",
      "file": "src/controllers/fieldMappingController.js",
      "params": [
        "clientId.path.required:number",
        "req.user:object",
        "req.user.role:string",
        "req.user.client_id:number"
      ],
      "returns": [
        "Array.<FieldMapping>",
        "object",
        "Error"
      ],
      "description": "Get all field mappings for a specific client."
    },
    {
      "name": "getById",
      "route": "GET /api/field-mappings/{id}",
      "file": "src/controllers/fieldMappingController.js",
      "params": [
        "id.path.required:number",
        "req.user:object",
        "req.user.client_id:number"
      ],
      "returns": [
        "FieldMapping",
        "object",
        "object",
        "Error"
      ],
      "description": "Get a specific field mapping by its ID."
    },
    {
      "name": "create",
      "route": "POST /api/field-mappings",
      "file": "src/controllers/fieldMappingController.js",
      "params": [
        "req.body.required:object",
        "req.body.name.required:string",
        "req.body.mapping.required:object",
        "req.body.client_id:number",
        "req.body.sample_data_url:string",
        "req.user:object",
        "req.user.client_id:number"
      ],
      "returns": [
        "FieldMapping",
        "object",
        "object",
        "Error"
      ],
      "description": "Create a new field mapping."
    },
    {
      "name": "update",
      "route": "PUT /api/field-mappings/{id}",
      "file": "src/controllers/fieldMappingController.js",
      "params": [
        "id.path.required:number",
        "req.body.required:object",
        "req.body.name:string",
        "req.body.mapping:object",
        "req.body.client_id:number",
        "req.body.sample_data_url:string",
        "req.user:object",
        "req.user.client_id:number",
        "req.user.role:string"
      ],
      "returns": [
        "FieldMapping",
        "object",
        "object",
        "object",
        "Error"
      ],
      "description": "Update an existing field mapping."
    },
    {
      "name": "delete",
      "route": "DELETE /api/field-mappings/{id}",
      "file": "src/controllers/fieldMappingController.js",
      "params": [
        "id.path.required:number",
        "req.user:object",
        "req.user.client_id:number",
        "req.user.role:string"
      ],
      "returns": [
        "object",
        "object",
        "object",
        "Error"
      ],
      "description": "Delete a field mapping."
    },
    {
      "name": "uploadSample",
      "route": "POST /api/field-mappings/upload-sample",
      "file": "src/controllers/fieldMappingController.js",
      "params": [
        "sampleFile.formData.required:file",
        "client_id.formData.required:number",
        "mappingName.formData.required:string",
        "req.user:object",
        "req.user.client_id:number"
      ],
      "returns": [
        "Object",
        "object",
        "object",
        "Error"
      ],
      "description": "Upload a sample XLSX file to S3 for a field mapping."
    },
    {
      "name": "getSignedUrl",
      "route": "GET /api/field-mappings/signedUrl",
      "file": "src/controllers/fieldMappingController.js",
      "params": [
        "key.query.required:string",
        "req.user:object"
      ],
      "returns": [
        "Object",
        "object",
        "Error"
      ],
      "description": "Get a pre-signed URL for accessing an S3 object (e.g., a sample XLSX file)."
    },
    {
      "name": "getAllImports",
      "route": "GET /api/imports",
      "file": "src/controllers/importController.js",
      "params": [
        "query.clientId:number",
        "query.search:string",
        "query.sortBy:string",
        "query.sortOrder:string",
        "query.page:number",
        "query.limit:number"
      ],
      "returns": [
        "object",
        "Error"
      ],
      "description": "Получить список всех историй загрузок"
    },
    {
      "name": "initiateImport",
      "route": "POST /api/imports/initiate",
      "file": "src/controllers/importController.js",
      "params": [
        "body.custom_name:string",
        "body.client_id.required:number",
        "body.field_mapping_id.required:number"
      ],
      "returns": [
        "ImportHistory",
        "Error"
      ],
      "description": "Инициировать новую загрузку (создать запись в ImportHistory)"
    },
    {
      "name": "uploadAndProcessFile",
      "route": "POST /api/imports/:importId/upload-file",
      "file": "src/controllers/importController.js",
      "params": [
        "importId.path.required:number",
        "importFile.formData.required:file"
      ],
      "returns": [
        "object",
        "Error"
      ],
      "description": "Загрузить файл для существующей записи ImportHistory и обработать его"
    },
    {
      "name": "executeImport",
      "route": "POST /api/imports/:importId/execute",
      "file": "src/controllers/importController.js",
      "params": [
        "importId.path.required:number"
      ],
      "returns": [
        "object",
        "Error"
      ],
      "description": "Загрузить обработанные данные в таблицу orders"
    },
    {
      "name": "getAll",
      "route": "GET /api/users",
      "file": "src/controllers/userController.js",
      "params": [
        "clientId:integer",
        "userType:string"
      ],
      "returns": [
        "Array.<User>",
        "Error"
      ],
      "description": "Получить всех пользователей. Поддерживает фильтрацию по clientId и userType."
    },
    {
      "name": "getById",
      "route": "GET /api/users/:id",
      "file": "src/controllers/userController.js",
      "params": [
        "id.path.required:integer"
      ],
      "returns": [
        "User",
        "Error",
        "Error"
      ],
      "description": "Получить пользователя по ID"
    },
    {
      "name": "create",
      "route": "POST /api/users",
      "file": "src/controllers/userController.js",
      "params": [
        "email.body.required:string",
        "password.body.required:string",
        "full_name.body:string",
        "role.body.required:string",
        "user_type.body.required:string",
        "phone.body:string",
        "position.body:string",
        "client_id.body:integer",
        "username.body:string"
      ],
      "returns": [
        "User",
        "Error",
        "Error"
      ],
      "description": "Создать нового пользователя"
    },
    {
      "name": "update",
      "route": "PUT /api/users/:id",
      "file": "src/controllers/userController.js",
      "params": [
        "id.path.required:integer",
        "email.body:string",
        "password.body:string",
        "full_name.body:string",
        "role.body:string",
        "user_type.body:string",
        "phone.body:string",
        "position.body:string",
        "client_id.body:integer",
        "is_active.body:boolean",
        "username.body:string"
      ],
      "returns": [
        "User",
        "Error",
        "Error",
        "Error"
      ],
      "description": "Обновить пользователя"
    },
    {
      "name": "remove",
      "route": "DELETE /api/users/:id",
      "file": "src/controllers/userController.js",
      "params": [
        "id.path.required:integer"
      ],
      "returns": [
        "object",
        "Error",
        "Error"
      ],
      "description": "Удалить пользователя"
    },
    {
      "name": "uploadXLSX",
      "route": "POST /api/field-mappings/upload-xlsx",
      "file": "src/controllers/xlsxController.js",
      "params": [
        "file.formData.required:file"
      ],
      "returns": [
        "object",
        "Error",
        "Error"
      ],
      "description": "Загружает и парсит XLSX файл, сохраняет его в S3."
    },
    {
      "name": "processS3XLSX",
      "route": "POST /api/field-mappings/process-s3-xlsx",
      "file": "src/controllers/xlsxController.js",
      "params": [
        "s3Key.body.required:string"
      ],
      "returns": [
        "object",
        "Error",
        "Error",
        "Error"
      ],
      "description": "Скачивает XLSX файл из S3 по ключу и парсит его."
    }
  ],
  "db_schema": {
    "users": {
      "id": "serial",
      "username": "varchar",
      "password_hash": "varchar",
      "full_name": "varchar",
      "email": "varchar",
      "role": "varchar",
      "is_active": "boolean",
      "created_at": "timestamp"
    },
    "orders": {
      "id": "serial",
      "city": "varchar",
      "subdivision": "varchar",
      "pick_up_point": "varchar",
      "order_number": "varchar",
      "order_date": "timestamp",
      "delivery_date": "timestamp",
      "customer_id": "varchar",
      "telephone": "varchar",
      "name": "varchar",
      "last_name": "varchar",
      "birthday": "date",
      "car_brand": "varchar",
      "car_model": "varchar",
      "category": "varchar",
      "brand": "varchar",
      "article_number": "varchar",
      "product": "varchar",
      "quantity": "int",
      "revenue": "float",
      "cost_price": "float",
      "entry_date": "timestamp",
      "entry_user": "varchar",
      "session_id": "int",
      "client_id": "int"
    },
    "companies": {
      "id": "serial",
      "name": "varchar",
      "inn": "varchar",
      "kpp": "varchar",
      "legal_address": "varchar",
      "actual_address": "varchar",
      "bank_details": "varchar",
      "contact_persons": "text",
      "created_at": "timestamp",
      "updated_at": "timestamp"
    },
    "company_representatives": {
      "id": "serial",
      "company_id": "int",
      "full_name": "varchar",
      "position": "varchar",
      "email": "varchar",
      "phone": "varchar",
      "created_at": "timestamp"
    },
    "field_mappings": {
      "id": "serial",
      "client_id": "int",
      "name": "varchar(255)",
      "mapping": "jsonb",
      "sample_data_url": "text",
      "created_at": "timestamp",
      "updated_at": "timestamp"
    },
    "import_history": {
      "id": "serial",
      "client_id": "int",
      "user_id": "int",
      "file_name": "varchar",
      "custom_name": "varchar(255)",
      "source_type": "varchar",
      "source_link": "varchar",
      "status": "varchar",
      "field_mapping_id": "int",
      "created_at": "timestamp"
    },
    "dictionaries": {
      "id": "serial",
      "type": "varchar",
      "value": "varchar",
      "extra": "varchar",
      "user_id": "int",
      "is_deleted": "boolean",
      "created_at": "timestamp",
      "updated_at": "timestamp"
    },
    "aliases": {
      "id": "serial",
      "dictionary_id": "int",
      "alias": "varchar",
      "user_id": "int",
      "is_deleted": "boolean",
      "created_at": "timestamp",
      "updated_at": "timestamp"
    },
    "blocklists": {
      "id": "serial",
      "company_id": "int",
      "user_id": "int",
      "phone": "varchar",
      "is_deleted": "boolean",
      "created_at": "timestamp",
      "updated_at": "timestamp"
    },
    "clients": {
      "id": "serial",
      "name": "varchar",
      "logo_url": "TEXT",
      "created_at": "timestamp",
      "updated_at": "timestamp"
    }
  }
}