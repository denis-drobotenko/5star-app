import React, { useState, useEffect } from 'react';
import { Button, Typography, Form, Input, message, Select, Skeleton, Upload, Progress, Empty, Space } from 'antd';
import { InfoCircleOutlined, UploadOutlined, LeftOutlined, RightOutlined } from '@ant-design/icons';
import { API_URL } from '../constants/appConstants';
import { requiredFields, targetFieldMappings } from '../constants/fieldMappingConstants';

const { Title, Paragraph } = Typography;

// –ö–æ–¥ —Ñ—É–Ω–∫—Ü–∏–∏ FieldMappingPage –∏–∑ App.jsx (—Å—Ç—Ä–æ–∫–∏ ~410-963) –±—É–¥–µ—Ç –∑–¥–µ—Å—å
function FieldMappingPage() {
  const [fileData, setFileData] = useState(null)
  const [sourceFields, setSourceFields] = useState([])
  const [currentRowIndex, setCurrentRowIndex] = useState(0)
  const [loading, setLoading] = useState(false) // –≠—Ç–æ loading –¥–ª—è XLSX —Ñ–∞–π–ª–∞
  const [uploadProgress, setUploadProgress] = useState(0)
  const [totalRows, setTotalRows] = useState(0)
  const [previewRows, setPreviewRows] = useState(0)
  const [processingFile, setProcessingFile] = useState(false)
  const [mappings, setMappings] = useState([])
  const [loadingMappings, setLoadingMappings] = useState(false) // –≠—Ç–æ –¥–ª—è —Å–ø–∏—Å–∫–∞ –º–∞–ø–ø–∏–Ω–≥–æ–≤
  const [form] = Form.useForm()
  const [selectedId, setSelectedId] = useState(null); // null | mapping.id | 'new'

  const isMappingValid = () => {
    const currentFormValues = form.getFieldsValue();
    if (!currentFormValues.name || currentFormValues.name.trim() === '') {
      return false;
    }
    const currentMappingObject = currentFormValues.mapping || {};
    const hasAllRequiredTargetFields = requiredFields.every(field => 
      currentMappingObject[field] && currentMappingObject[field].trim() !== ''
    );
    if (!hasAllRequiredTargetFields) {
      return false;
    }
    return true;
  }

  const logToFile = async (messageText, data = null) => { // –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–ª message –≤ messageText –≤–æ –∏–∑–±–µ–∂–∞–Ω–∏–µ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞ —Å message –∏–∑ antd
    try {
      const timestamp = new Date().toISOString();
      let logMessage = `\n[${timestamp}] ${messageText}`;
      if (data) {
        logMessage += '\n' + JSON.stringify(data, null, 2);
      }
      
      const response = await fetch('/api/debug-log', { // TODO: –ó–∞–º–µ–Ω–∏—Ç—å –Ω–∞ API_URL –µ—Å–ª–∏ —ç—Ç–æ –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${localStorage.getItem('token')}`
        },
        body: JSON.stringify({ message: logMessage }) // –∑–¥–µ—Å—å –ø–∞—Ä–∞–º–µ—Ç—Ä message, –∫–∞–∫ –æ–∂–∏–¥–∞–µ—Ç –±—ç–∫–µ–Ω–¥
      });
      
      if (!response.ok) {
        console.error('Failed to write to log file');
      }
    } catch (error) {
      console.error('Error writing to log file:', error);
    }
  };

  const autoMapFields = async (currentSourceFields) => { // –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–ª sourceFields
    await logToFile('üîç –ù–ê–ß–ê–õ–û –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ì–û –°–û–ü–û–°–¢–ê–í–õ–ï–ù–ò–Ø –ü–û–õ–ï–ô üîç');
    await logToFile('–ò—Å—Ö–æ–¥–Ω—ã–µ –ø–æ–ª—è:', currentSourceFields);

    const normalizeField = (field) => {
      const normalized = field.toLowerCase()
        .replace(/[_\-\.()‚Ññ]/g, ' ')
        .replace(/\s+/g, ' ')
        .trim();
      return normalized;
    }

    await logToFile('üìå –≠–¢–ê–ü 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä—è–º—ã—Ö —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–π');
    
    const mapping = {};
    const usedSourceFields = new Set();

    for (const sourceField of currentSourceFields) {
      const normalizedSource = normalizeField(sourceField);
      await logToFile(`–ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª–µ: "${sourceField}"`, { normalized: normalizedSource });
      
      switch(normalizedSource) {
        case '–∑–∞–∫–∞–∑–∞':
        case '‚Ññ –∑–∞–∫–∞–∑–∞':
          mapping['order_number'] = sourceField;
          usedSourceFields.add(sourceField);
          await logToFile('‚úÖ –°–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–æ —Å order_number');
          break;
        // ... (–æ—Å—Ç–∞–ª—å–Ω—ã–µ case –∏–∑ autoMapFields) ...
        case '–¥–∞—Ç–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è':
          mapping['order_date'] = sourceField;
          usedSourceFields.add(sourceField);
          await logToFile('‚úÖ –°–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–æ —Å order_date');
          break;
        case '–¥–∞—Ç–∞ –≤—ã–¥–∞—á–∏ –∑–∞–∫–∞–∑–∞':
          mapping['delivery_date'] = sourceField;
          usedSourceFields.add(sourceField);
          await logToFile('‚úÖ –°–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–æ —Å delivery_date');
          break;
        case '–±—Ä–µ–Ω–¥':
          mapping['brand'] = sourceField;
          usedSourceFields.add(sourceField);
          await logToFile('‚úÖ –°–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–æ —Å brand');
          break;
        case '–∞—Ä—Ç–∏–∫—É–ª':
          mapping['article_number'] = sourceField;
          usedSourceFields.add(sourceField);
          await logToFile('‚úÖ –°–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–æ —Å article_number');
          break;
        case '—Ç–æ–≤–∞—Ä':
          mapping['product'] = sourceField;
          usedSourceFields.add(sourceField);
          await logToFile('‚úÖ –°–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–æ —Å product');
          break;
        case '–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ':
          mapping['quantity'] = sourceField;
          usedSourceFields.add(sourceField);
          await logToFile('‚úÖ –°–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–æ —Å quantity');
          break;
        case '—Ä–æ–∑–Ω–∏—Ü–∞ —Å—É–º–º–∞':
        case '—Ä–æ–∑–Ω–∏—Ü–∞ (—Å—É–º–º–∞)':
          mapping['revenue'] = sourceField;
          usedSourceFields.add(sourceField);
          await logToFile('‚úÖ –°–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–æ —Å revenue');
          break;
        case '—Ç–µ–ª–µ—Ñ–æ–Ω':
          mapping['telephone'] = sourceField;
          usedSourceFields.add(sourceField);
          await logToFile('‚úÖ –°–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–æ —Å telephone');
          break;
        case '–∏–º—è':
          mapping['name'] = sourceField;
          usedSourceFields.add(sourceField);
          await logToFile('‚úÖ –°–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–æ —Å name');
          break;
        case '—Ñ–∞–º–∏–ª–∏—è':
          mapping['last_name'] = sourceField;
          usedSourceFields.add(sourceField);
          await logToFile('‚úÖ –°–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–æ —Å last_name');
          break;
        case 'car brand':
        case 'car_brand':
          mapping['car_brand'] = sourceField;
          usedSourceFields.add(sourceField);
          await logToFile('‚úÖ –°–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–æ —Å car_brand');
          break;
        case 'car model':
        case 'car_model':
          mapping['car_model'] = sourceField;
          usedSourceFields.add(sourceField);
          await logToFile('‚úÖ –°–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–æ —Å car_model');
          break;
        default:
          await logToFile('‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –ø—Ä—è–º—ã—Ö —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–π');
      }
    }

    await logToFile('üìä –ò–¢–û–ì–û–í–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢', {
      mapping,
      usedSourceFields: Array.from(usedSourceFields),
      unmappedFields: currentSourceFields.filter(f => !usedSourceFields.has(f))
    });

    return mapping;
  }

  const fetchMappings = async () => {
    setLoadingMappings(true)
    try {
      const token = localStorage.getItem('token')
      const res = await fetch(`${API_URL}/api/field-mappings`, {
        headers: { 'Authorization': `Bearer ${token}` }
      })
      const data = await res.json()
      setMappings(Array.isArray(data) ? data : [])
    } catch (e) {
      message.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–∞–ø–ø–∏–Ω–≥–æ–≤')
    } finally {
      setLoadingMappings(false)
    }
  }

  useEffect(() => {
    fetchMappings()
  }, [])

  useEffect(() => {
    if (selectedId === 'new') {
      form.resetFields();
      setFileData(null);
      setSourceFields([]);
      setCurrentRowIndex(0);
    } else if (selectedId) {
      const mappingData = mappings.find(m => m.id === selectedId);
      if (mappingData) {
        form.setFieldsValue(mappingData);
      } else {
        setSelectedId(null);
        form.resetFields();
      }
      setFileData(null);
      setSourceFields([]);
      setCurrentRowIndex(0);
    } else {
      form.resetFields();
      setFileData(null);
      setSourceFields([]);
      setCurrentRowIndex(0);
    }
  }, [selectedId, mappings, form]);

  const handleSelect = (id) => {
    setSelectedId(id);
  }

  const handleAdd = () => {
    setSelectedId('new');
  }
  
  const handleCancel = () => {
    setSelectedId(null);
  };

  const handleSubmit = async (values) => {
    try {
      const token = localStorage.getItem('token')
      let res;
      let method;
      let url;

      const payload = {
        name: values.name,
        mapping: values.mapping || {}
      };

      if (selectedId === 'new') {
        method = 'POST';
        url = `${API_URL}/api/field-mappings`;
      } else {
        method = 'PUT';
        url = `${API_URL}/api/field-mappings/${selectedId}`;
      }
      
      res = await fetch(url, {
        method: method,
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${token}`
        },
        body: JSON.stringify(payload)
      });
      
      const data = await res.json()
      if (!res.ok) throw new Error(data.message || '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞');
      
      message.success(selectedId === 'new' ? '–ú–∞–ø–ø–∏–Ω–≥ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω' : '–ú–∞–ø–ø–∏–Ω–≥ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω');
      fetchMappings();
      setSelectedId(null);
    } catch (e) {
      message.error(e.message || '–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –º–∞–ø–ø–∏–Ω–≥–∞');
      console.error("Submit error:", e);
    }
  }

  const handleDeleteMapping = async () => {
    if (!selectedId || selectedId === 'new') return;
    if (!window.confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç –º–∞–ø–ø–∏–Ω–≥?')) return;

    try {
      const token = localStorage.getItem('token');
      const res = await fetch(`${API_URL}/api/field-mappings/${selectedId}`, {
        method: 'DELETE',
        headers: { 'Authorization': `Bearer ${token}` }
      });

      if (!res.ok) {
        const errorData = await res.json().catch(() => ({ message: '–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –º–∞–ø–ø–∏–Ω–≥–∞' }));
        throw new Error(errorData.message);
      }
      message.success('–ú–∞–ø–ø–∏–Ω–≥ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω');
      fetchMappings();
      setSelectedId(null);
    } catch (e) {
      message.error(e.message || '–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –º–∞–ø–ø–∏–Ω–≥.');
    }
  };

  const handleFileUpload = async (file) => {
    // –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–µ –¥–ª—è –ª–æ–≥–æ—Ç–∏–ø–∞, –∞ –¥–ª—è XLSX —Ñ–∞–π–ª–∞.
    // –õ–æ–≥–∏–∫–∞ –∏–∑ ClientsPage/UsersPage –¥–ª—è –ª–æ–≥–æ –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç.
    // –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ —á—Ç–µ–Ω–∏—è XLSX –∏ –≤—ã–∑–æ–≤–∞ autoMapFields.
    // –¢–µ–∫—É—â–∞—è —Ñ—É–Ω–∫—Ü–∏—è handleFileUpload –≤ App.jsx –¥–ª—è FieldMappingPage –≤—ã–≥–ª—è–¥–∏—Ç –Ω–µ–ø–æ–ª–Ω–æ–π.
    // –Ø –æ—Å—Ç–∞–≤–ª—é –µ–µ –∫–∞–∫ –µ—Å—Ç—å –≤ App.jsx, –Ω–æ —É–∫–∞–∂—É –Ω–∞ —ç—Ç–æ—Ç –º–æ–º–µ–Ω—Ç.
    // setIsUploadingLogo(true); // –≠—Ç–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –Ω–µ—Ç
    message.info('–§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞ –¥–ª—è XLSX –µ—â–µ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ –¥–æ –∫–æ–Ω—Ü–∞ –≤ —ç—Ç–æ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–µ.');
    // –ü—Ä–∏–º–µ—Ä –∏–∑–Ω–∞—á–∞–ª—å–Ω–æ–π –ª–æ–≥–∏–∫–∏ (–µ—Å–ª–∏ –±—ã–ª–∞):
    // setLoading(true); setUploadProgress(0); setProcessingFile(false);
    // const reader = new FileReader();
    // reader.onprogress = (event) => { ... setUploadProgress ... }
    // reader.onload = async (e) => { ... setProcessingFile(true) ... setSourceFields ... autoMapFields ... }
    // reader.readAsArrayBuffer(file);
    return false; // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é –∑–∞–≥—Ä—É–∑–∫—É antd
  };

  // handleRemoveLogo –Ω–µ –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –∫ —ç—Ç–æ–º—É –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—É.

  const currentMappingData = selectedId && selectedId !== 'new' ? mappings.find(m => m.id === selectedId) : null;

  return (
    <div className="list-detail-layout">
      <div 
        className="list-container"
        style={{ 
          // width: '320px',
          // minWidth: '320px'
        }}
      >
        <div className="list-header">
          <Title level={4} style={{ margin: 0, flex: 1 }}>–ü—Ä–æ—Ñ–∏–ª–∏ –º–∞–ø–ø–∏–Ω–≥–∞</Title>
          <Button className="add-list-item-button" type="primary" size="small" onClick={handleAdd}>
            –î–æ–±–∞–≤–∏—Ç—å
          </Button>
        </div>
        {loadingMappings && mappings.length === 0 ? (
          <Skeleton active paragraph={{ rows: 8 }} />
        ) : mappings.length > 0 ? (
          <div className="list-scroll-area">
            {mappings.map(m => (
              <div
                key={m.id}
                onClick={() => handleSelect(m.id)}
                className={`list-item mapping-list-item ${selectedId === m.id ? 'selected' : ''}`}
              >
                <div className="list-item-content-wrapper">
                  <span className="list-item-line1">{m.name}</span>
                </div>
              </div>
            ))}
          </div>
        ) : (
          <Empty description="–ü—Ä–æ—Ñ–∏–ª–∏ –º–∞–ø–ø–∏–Ω–≥–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç." style={{ marginTop: '30px' }} />
        )}
      </div>

      <div className="detail-pane">
        {selectedId ? (
          <>
            <Title level={4} style={{ paddingTop: '16px', marginBottom: '24px', paddingLeft: '24px' }}>
              {selectedId === 'new' 
                ? '–ù–æ–≤—ã–π –º–∞–ø–ø–∏–Ω–≥' 
                : (currentMappingData ? `–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–∞–ø–ø–∏–Ω–≥–∞: ${currentMappingData.name}` : '–ó–∞–≥—Ä—É–∑–∫–∞...')}
            </Title>
            <Form
              form={form}
              layout="vertical"
              onFinish={handleSubmit}
              size="small"
              style={{ 
                flexGrow: 1, 
                overflowY: 'auto', 
                paddingRight: '10px',
                display: 'flex',
                flexDirection: 'column'
              }} 
              className="custom-scroll-list"
            >
              <div style={{ flexGrow: 1, overflowY: 'auto' }} className="custom-scroll-list">
              <Form.Item
                name="name"
                label="–ù–∞–∑–≤–∞–Ω–∏–µ –º–∞–ø–ø–∏–Ω–≥–∞"
                rules={[{ required: true, message: '–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–∞–ø–ø–∏–Ω–≥–∞' }]}
                style={{ marginBottom: 24 }}
              >
                <Input placeholder="–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –º–∞–ø–ø–∏–Ω–≥–∞" />
              </Form.Item>

              <Upload.Dragger
                beforeUpload={handleFileUpload}
                accept=".xlsx,.xls"
                maxCount={1}
                showUploadList={false}
                disabled={loading}
                style={{ marginBottom: '24px' }}
              >
                <p className="ant-upload-drag-icon" style={{ marginBottom: '4px' }}>
                  <UploadOutlined />
                </p>
                <p className="ant-upload-text" style={{ marginBottom: '4px', fontSize: '14px' }}>
                  {loading ? (processingFile ? '–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞...' : '–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞...') : '–ù–∞–∂–º–∏—Ç–µ –∏–ª–∏ –ø–µ—Ä–µ—Ç–∞—â–∏—Ç–µ —Ñ–∞–π–ª XLSX –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏'}
                </p>
                {loading && (
                  <div style={{ marginTop: 4, padding: '0 32px' }}>
                    <Progress 
                      percent={processingFile ? 99 : uploadProgress} 
                      status={processingFile ? "active" : (uploadProgress === 100 ? "success" : "active")}
                      size="small"
                    />
                  </div>
                )}
                <p className="ant-upload-hint" style={{ margin: '4px 0 0 0', fontSize: '12px', color: '#888' }}>
                  –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ñ–∞–π–ª—ã Excel (.xlsx, .xls) —Ä–∞–∑–º–µ—Ä–æ–º –¥–æ 20MB
                </p>
              </Upload.Dragger>

              {fileData && (
                <>
                  <div style={{ 
                    display: 'flex', 
                    alignItems: 'center', 
                    gap: '12px',
                    padding: '12px',
                    background: '#fafafa',
                    borderRadius: '6px',
                    marginBottom: '24px'
                  }}>
                    <Button 
                      icon={<LeftOutlined />} 
                      onClick={() => setCurrentRowIndex(prev => Math.max(0, prev - 1))}
                      disabled={currentRowIndex === 0}
                      size="small"
                    />
                    <span style={{ flex: 1, textAlign: 'center' }}>
                      –ó–∞–ø–∏—Å—å {currentRowIndex + 1} –∏–∑ {previewRows}
                      <div style={{ fontSize: '12px', color: '#888' }}>
                        –í—Å–µ–≥–æ —Å—Ç—Ä–æ–∫ –≤ —Ñ–∞–π–ª–µ: {totalRows}
                      </div>
                    </span>
                    <Button 
                      icon={<RightOutlined />} 
                      onClick={() => setCurrentRowIndex(prev => Math.min(previewRows - 1, prev + 1))}
                      disabled={currentRowIndex >= previewRows - 1}
                      size="small"
                    />
                  </div>

                  <div style={{ marginBottom: '24px' }}>
                    {Object.entries(targetFieldMappings).map(([fieldKey, fieldInfo]) => (
                      <Form.Item
                        key={fieldKey}
                        label={fieldInfo.name}
                        name={['mapping', fieldKey]}
                        rules={[
                          { 
                            required: requiredFields.includes(fieldKey),
                            message: `–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª–µ –¥–ª—è "${fieldInfo.name}"` 
                          }
                        ]}
                      >
                        <Select
                          placeholder={`–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª–µ –¥–ª—è "${fieldInfo.name}"`}
                          allowClear
                        >
                          {sourceFields.map(field => (
                            <Select.Option key={field} value={field}>
                              {field}
                            </Select.Option>
                          ))}
                        </Select>
                      </Form.Item>
                    ))}
                  </div>
                </>
              )}
              </div>
              
              <Form.Item 
                style={{ 
                  paddingTop: '16px', 
                  borderTop: '1px solid #f0f0f0',
                  marginTop: 'auto',
                  marginBottom: 0
                }}
              >
                <Space style={{display: 'flex', justifyContent: 'space-between', width: '100%'}}>
                  <div>
                  <Button 
                    type="primary" 
                    htmlType="submit"
                    disabled={!isMappingValid()}
                    style={{marginRight: '8px'}}
                  >
                      {selectedId === 'new' ? '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –º–∞–ø–ø–∏–Ω–≥' : '–û–±–Ω–æ–≤–∏—Ç—å –º–∞–ø–ø–∏–Ω–≥'}
                  </Button>
                    <Button onClick={handleCancel}>
                    –û—Ç–º–µ–Ω–∞
                  </Button>
                  </div>
                  {selectedId && selectedId !== 'new' && currentMappingData && (
                    <Button 
                      danger 
                      onClick={handleDeleteMapping}
                    >
                      –£–¥–∞–ª–∏—Ç—å
                    </Button>
                  )}
                </Space>
              </Form.Item>
            </Form>
          </>
        ) : mappings.length > 0 && !loadingMappings ? (
          <div className="detail-pane-instruction" style={{ paddingLeft: '24px' }}>
            <InfoCircleOutlined />
            <p>–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å –º–∞–ø–ø–∏–Ω–≥–∞ –∏–∑ —Å–ø–∏—Å–∫–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è, –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ ¬´–î–æ–±–∞–≤–∏—Ç—å¬ª –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ.</p>
          </div>
        ) : (
          !loadingMappings && mappings.length === 0 ? (
             <Empty description="–°–æ–∑–¥–∞–π—Ç–µ —Å–≤–æ–π –ø–µ—Ä–≤—ã–π –ø—Ä–æ—Ñ–∏–ª—å –º–∞–ø–ø–∏–Ω–≥–∞, –Ω–∞–∂–∞–≤ –∫–Ω–æ–ø–∫—É '–î–æ–±–∞–≤–∏—Ç—å'." style={{ marginTop: '60px'}}/>
          ) : null
        )}
      </div>
    </div>
  )
}

export default FieldMappingPage; 